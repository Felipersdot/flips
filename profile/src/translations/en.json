{
  "Navigation.home": "Home",
  "Navigation.contact": "Contact",
  "Navigation.investments": "Investments",
  "Navigation.newsFeed": "News Feed",
  "Navigation.endeavors": "Endeavors",
  "Navigation.projects": "Projects",
  "Navigation.references": "References",
  "MainPage.aboutMe": "I am a full stack developer, aspiring to make meaningful impacts by continuously integrating new findings and studies into current practices. I carry a keen interest for the optimization and enhancement of current infrastructure by analyzing its fundamentals and assessing areas of interest to increase productivity, reduce latency, and enhance user experience. I continuously maintain my skills by contributing to the APIs of open source projects, reviewing documentation, correlating their objectives with the program's ability to perform, and assessing the performance metrics to isolate areas of possible improvements.",
  "MainPage.education": "Texas State University, 2015-2021, Bachelors of Arts in Computer Science, San Marcos, TX. ",
  "MainPage.certification1": "Google Data Analytics Certification",

  "MainPage.OOP.Overview": "The course covers object-oriented design principles and programming for students with prior programming experience. The modules cover object-oriented analysis, design process, and programming in Java.",
  "MainPage.OOP.skillGained": "UML diagrams were used to solidify associations between classes, interfaces, and proper data structures within classes, to ensure cohesive operations between instances of multiple classes. Design patterns such as Fa√ßade, Decorator, and Observer were used between the development of the classes. Allowing instances of classes to be responsive based on the appropriate events that were taking place by their respective instances. This was ensured by using core Java concepts related to Object Oriented Programming: Inheritance, Encapsulation, Polymorphism, and Data abstraction. Finally, examining code by testing for exceptions and refactoring master code to its GUI using the Java Swing Library. Finalizing all documentation on the API and releasing sets for general users and developers respectively.",

  "MainPage.ProgrammingSkillSet.Overview": "database system organization with the management and design of data, data models, data modeling theory, optimization, normalization, integrity constraints, and query languages. The application database system design, implementation, and data modeling techniques for solving real world problems will be emphasized.",
  "MainPage.ProgrammingSkillSet.skillGained": "Implementing a dynamic application that handles requests and data presented by the user. Implementation was done using HTML CSS JS PHP and SQL. Implementation of database design was done using concepts of normalization of the 3rd degree. Event-driven programming skills were integrated to dynamically break data entries given by users and interact with the DBMS as needed. Advanced SQL techniques will then be used to redesign the architecture of the database while maintaining the integrity of the data.",

  "MainPage.OperatingSystemsSkillSet.Overview": "Course covers the principles of operating systems, algorithms for CPU scheduling, memory management, cooperating sequential processes and device management.",
  "MainPage.OperatingSystemsSkillSet.skillGained": "Understand inter-process communication (IPC) mechanisms such as semaphores, monitors, event counts, message passing, etc. Be exposed to traditional solutions of IPC problems using these mechanisms (e.g., Dining Philosophers, Reader/Writer, Bounded Buffer, Barrier Problems, etc.). Understand what a driver is-what its relationship is to other components such as the interrupt system and file system. Look at details of at least one driver in some operating system. Be exposed to significant sections of code from 'real' operating systems."
}
